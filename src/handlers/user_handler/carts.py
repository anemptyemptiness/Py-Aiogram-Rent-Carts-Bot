from datetime import datetime, timezone, timedelta

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import default_state
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import ReplyKeyboardRemove

from src.db import DB_mongo
from src.callbacks.cart_callback import CartCallbackFactory
from src.callbacks.place import PlaceCallbackFactory
from src.db.postgre.dao import AsyncOrm
from src.keyboards.keyboard_carts import get_keyboard
from src.keyboards.keyboard import create_places_kb, create_cancel_kb
from src.lexicon.lexicon_ru import TO_RENTING, TO_FREE, RUSSIAN_WEEK_DAYS
from src.middlewares.throttling_middleware import ThrottlingMiddleware
from src.fsm.fsm import FSMCarts
from src.config import settings
from src.db import cached_places
import logging

router_carts = Router()
router_carts.callback_query.middleware(middleware=ThrottlingMiddleware())
logger = logging.getLogger(__name__)


@router_carts.message(Command(commands="carts"), StateFilter(default_state))
async def create_carts_command(message: Message, state: FSMContext):
    await message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ <b>–Ω–∏–∂–µ</b>",
        reply_markup=await create_places_kb(),
        parse_mode="html",
    )
    await state.set_state(FSMCarts.place)


@router_carts.callback_query(StateFilter(FSMCarts.place), PlaceCallbackFactory.filter())
async def process_place_command(callback: CallbackQuery, callback_data: PlaceCallbackFactory, state: FSMContext):
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ <b>–Ω–∏–∂–µ</b>\n\n"
             f"‚û¢ {callback_data.title}",
        parse_mode="html",
    )
    await state.update_data(place=callback_data.title)

    # –µ—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞—è, —Ç–æ —Å–æ–∑–¥–∞—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—á–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å —Ç–µ–ª–µ–∂–∫–∞–º–∏
    if not DB_mongo.check_for_carts_today_collection_by_place(place=callback_data.title):
        await DB_mongo.update_carts_from_place(place=callback_data.title)
        DB_mongo.reset_today_from_place(chat_id=callback.message.chat.id, place=callback_data.title)

    msg = await callback.message.answer(
        text="üõí<b>–°–ø–∏—Å–æ–∫ —Ç–µ–ª–µ–∂–µ–∫:</b>",
        reply_markup=await get_keyboard(place=callback_data.title),
        parse_mode="html",
    )

    DB_mongo.update_today(
        place=callback_data.title,
        message_id=msg.message_id,
        chat_id=callback.message.chat.id,
    )

    await callback.answer()
    await state.set_state(FSMCarts.working_day)


@router_carts.callback_query(StateFilter(FSMCarts.working_day), CartCallbackFactory.filter())
async def process_carts_command(callback: CallbackQuery, callback_data: CartCallbackFactory, bot: Bot):
    time_now = datetime.now(tz=timezone(timedelta(hours=3.0)))

    # —Ç–µ–ª–µ–∂–∫–∞ —Å–≤–æ–±–æ–¥–Ω–∞ –∏ –º–µ–Ω—è–µ–º –µ–µ –Ω–∞ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é
    if callback_data.status == 'free':
        status = DB_mongo.update_info_cart_from_place(
            place=callback_data.title_place,
            number_of_cart=callback_data.number,
            to_status=TO_RENTING,
            time=time_now.strftime("%H:%M"),
        )

    # —Ç–µ–ª–µ–∂–∫–∞ –≤ –∞—Ä–µ–Ω–¥–µ –∏ –º–µ–Ω—è–µ–º –µ–µ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—É—é
    else:
        status = DB_mongo.update_info_cart_from_place(
            place=callback_data.title_place,
            number_of_cart=callback_data.number,
            to_status=TO_FREE,
        )

    DB_mongo.update_today(
        place=callback_data.title_place,
        message_id=callback.message.message_id,
        chat_id=callback.message.chat.id,
    )

    for chat_id, message_id in DB_mongo.get_inline_markup_message_chat_ids_from_place(place=callback_data.title_place):
        await bot.edit_message_reply_markup(
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=await get_keyboard(place=callback_data.title_place),
        )

    await callback.answer(
        text="–¢–µ–ª–µ–∂–∫–∞ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–∞" if status == TO_RENTING else "–¢–µ–ª–µ–∂–∫–∞ –æ—Å–≤–æ–±–æ–¥–∏–ª–∞—Å—å"
    )


@router_carts.callback_query(StateFilter(FSMCarts.working_day), F.data == "report_carts")
async def process_report_carts_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="‚û¢ –û—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç—á—ë—Ç"
    )

    place = (await state.get_data())['place']
    data = DB_mongo.get_total_time_carts_from_place(place=place)

    day_of_week = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime('%A')
    current_date = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime(f'%d/%m/%Y - {RUSSIAN_WEEK_DAYS[day_of_week]}')

    report = "üìù–ü—Ä–æ–∫–∞—Ç —Ç–µ–ª–µ–∂–µ–∫:\n\n"
    report += f"–î–∞—Ç–∞: {current_date}\n"
    report += f"–¢–æ—á–∫–∞: {place}\n"
    report += f"–ò–º—è: {await AsyncOrm.get_current_name(user_id=callback.message.chat.id)}\n\n"

    for cart, total_time_list in data:  # cart = "cart_N", total_time_list = [time_1, time_2, time_3, ...]
        if total_time_list:
            report += f"üõí<b>–¢–µ–ª–µ–∂–∫–∞ {cart.split('_')[1]}</b>\n<b>‚îî</b>"
            report += "<em>" + ", ".join([time for time in total_time_list]) + "</em>\n\n"
        else:
            report += f"üõí<b>–¢–µ–ª–µ–∂–∫–∞ {cart.split('_')[1]}</b>\n<b>‚îî</b>"
            report += "<em>—Ç–µ–ª–µ–∂–∫—É –Ω–µ –∞—Ä–µ–Ω–¥–æ–≤—ã–≤–∞–ª–∏</em>\n\n"

    try:
        await callback.message.bot.send_message(
            chat_id=cached_places[place],
            text=report,
            parse_mode="html",
        )

        for chat_id, message_id in DB_mongo.get_inline_markup_message_chat_ids_from_place(place=place):
            if chat_id != callback.message.chat.id:
                await callback.message.bot.send_message(
                    chat_id=chat_id,
                    text="–ë—ã–ª —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –æ—Ç—á—ë—Ç! –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–ª–µ–∂–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –æ–±–Ω—É–ª–∏–ª–æ—Å—å",
                )
                await callback.message.bot.send_message(
                    chat_id=chat_id,
                    text='–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>"–û—Ç–º–µ–Ω–∞"</b> –Ω–∏–∂–µ '
                         '–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <b>"–û—Ç–º–µ–Ω–∞"</b>, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n'
                         '–ï—Å–ª–∏ –í—ã –Ω–µ –±—ã–ª–∏ –Ω–∏ –≤ –∫–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–µ - –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!',
                    reply_markup=create_cancel_kb(),
                    parse_mode="html",
                )
                await callback.message.bot.delete_message(
                    chat_id=chat_id,
                    message_id=message_id,
                )

        await DB_mongo.update_carts_from_place(place=place)
        DB_mongo.reset_today_from_place(chat_id=callback.message.chat.id, place=place)

        await state.clear()
        await callback.message.answer(
            text="–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!üëçüèª",
            reply_markup=ReplyKeyboardRemove(),
        )
        await callback.message.answer(
            text="–Ø –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω—É–ª–∏–ª –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ —Ç–µ–ª–µ–∂–µ–∫‚ö†Ô∏è"
        )
        await callback.message.answer(
            text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        )
        await callback.answer()
    except TelegramBadRequest as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /carts –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞")
        await callback.message.bot.send_message(
            text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ —Å —Ç–µ–ª–µ–∂–∫–∞–º–∏\n"
                 "–ö–æ–º–∞–Ω–¥–∞: /carts\n\n"
                 f"{e}",
            chat_id=settings.ADMIN_ID,
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /carts –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞")
        await callback.message.bot.send_message(
            text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ —Å —Ç–µ–ª–µ–∂–∫–∞–º–∏\n"
                 "–ö–æ–º–∞–Ω–¥–∞: /carts\n\n"
                 f"{e}",
            chat_id=settings.ADMIN_ID,
            reply_markup=ReplyKeyboardRemove()
        )


@router_carts.callback_query(StateFilter(FSMCarts.working_day), F.data == "go_back_to_menu")
async def process_go_back_to_menu_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="‚û¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
    )
    await callback.message.answer(
        text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    )
    await callback.answer()
    await state.clear()


@router_carts.message(StateFilter(FSMCarts.working_day))
async def warning_working_day_command(message: Message):
    await message.answer(
        text="–ù–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ –º–Ω–µ –ø–∏—Å–∞—Ç—å, –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ç–µ–ª–µ–∂–µ–∫ "
             '–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <b>"–û—Ç–º–µ–Ω–∞"</b> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>"–û—Ç–º–µ–Ω–∞"</b> –Ω–∏–∂–µ!',
        parse_mode="html",
    )