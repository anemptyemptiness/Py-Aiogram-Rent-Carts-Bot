from typing import Any, Dict, Union
from datetime import datetime, timezone, timedelta

from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, InputMediaPhoto
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import default_state
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramAPIError

from src.config import settings
from src.db.postgre.dao import AsyncOrm
from src.fsm.fsm import FSMStartShift
from src.keyboards.keyboard import create_places_kb, create_cancel_kb, create_yes_no_kb
from src.middlewares.album_middleware import AlbumsMiddleware
from src.callbacks.place import PlaceCallbackFactory
from src.lexicon.lexicon_ru import RUSSIAN_WEEK_DAYS
from src.db import DB
from src.db import cached_places
import logging

router_start_shift = Router()
router_start_shift.message.middleware(middleware=AlbumsMiddleware(2))
logger = logging.getLogger(__name__)

async def report(data: Dict[str, Any], date: str, user_id: Union[str, int]) -> str:
    return "üìù–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã:\n\n" \
           f"–î–∞—Ç–∞: {date}\n" \
           f"–¢–æ—á–∫–∞: {data['place']}\n" \
           f"–ò–º—è: {await AsyncOrm.get_current_name(user_id=user_id)}\n\n" \
           f"–¢–µ–ª–µ–∂–∫–∏ —á–∏—Å—Ç—ã–µ: <em>{'–¥–∞' if data['is_carts_clean'] == '–¥–∞' else '–Ω–µ—Ç‚ö†Ô∏è'}</em>\n" \
           f"–ü–æ–ª —á–∏—Å—Ç—ã–π: <em>{'–¥–∞' if data['is_floor_clean'] == '–¥–∞' else '–Ω–µ—Ç‚ö†Ô∏è'}</em>\n" \
           f"–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã —É —Ç–µ–ª–µ–∂–µ–∫: <em>{'–¥–∞‚ö†Ô∏è' if data['is_carts_defects'] == '–¥–∞' else '–Ω–µ—Ç'}</em>"


async def send_report(message: Message, state: FSMContext, data: dict, date: str, chat_id: Union[str, int]):
    try:
        await message.bot.send_message(
            chat_id=chat_id,
            text=await report(
                data=data,
                date=date,
                user_id=message.chat.id,
            ),
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="html",
        )

        await message.bot.send_photo(
            chat_id=chat_id,
            photo=data['employee_photo'],
            caption="–§–æ—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
        )

        object_photo = [
            InputMediaPhoto(
                media=photo_file_id,
                caption="–§–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞" if i == 0 else ''
            ) for i, photo_file_id in enumerate(data['object_photo'])
        ]

        await message.bot.send_media_group(
            media=object_photo,
            chat_id=chat_id,
        )

        if data['is_carts_defects'] == '–¥–∞':
            carts_defects = [
                InputMediaPhoto(
                    media=photo_file_id,
                    caption="–§–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Ç–µ–ª–µ–∂–µ–∫" if i == 0 else ''
                ) for i, photo_file_id in enumerate(data['defects_photo'])
            ]

            await message.bot.send_media_group(
                media=carts_defects,
                chat_id=chat_id,
            )

        await message.answer(
            text="–û—Ç–ª–∏—á–Ω–æ! –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ωüëçüèª",
            reply_markup=ReplyKeyboardRemove(),
        )
        await message.answer(
            text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        )

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –Ω–µ —Å —Ç–µ–ª–µ–≥—Ä–∞–º –≤ start_shift.py")
        await message.bot.send_message(
            text=f"Start shift report error: {e}\n"
                 f"User id: {message.chat.id}",
            chat_id=settings.ADMIN_ID,
            reply_markup=ReplyKeyboardRemove(),
        )
        await message.answer(
            text="–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–æ–æ–±—â–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É!",
            reply_markup=ReplyKeyboardRemove(),
        )
    except TelegramAPIError as e:
        logger.exception("–û—à–∏–±–∫–∞ —Å —Ç–µ–ª–µ–≥—Ä–∞–º –≤ start_shift.py")
        await message.bot.send_message(
            text=f"Start shift report error: {e}\n"
                 f"User id: {message.chat.id}",
            chat_id=settings.ADMIN_ID,
            reply_markup=ReplyKeyboardRemove(),
        )
        await message.answer(
            text="–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–æ–æ–±—â–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É!",
            reply_markup=ReplyKeyboardRemove(),
        )
    finally:
        await message.answer(
            text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        )

        await state.clear()


@router_start_shift.message(Command(commands="start_shift"), StateFilter(default_state))
async def process_start_shift_command(message: Message, state: FSMContext):
    await message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ <b>–Ω–∏–∂–µ</b>",
        reply_markup=await create_places_kb(),
        parse_mode="html",
    )
    await state.set_state(FSMStartShift.place)


@router_start_shift.callback_query(StateFilter(FSMStartShift.place), PlaceCallbackFactory.filter())
async def process_select_place_command(callback: CallbackQuery, callback_data: PlaceCallbackFactory, state: FSMContext):
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ <b>–Ω–∏–∂–µ</b>\n\n"
             f"‚û¢ {callback_data.title}",
        parse_mode="html",
    )
    await state.update_data(place=callback_data.title)
    await callback.message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –í–∞—à–µ —Ñ–æ—Ç–æ –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ",
        reply_markup=create_cancel_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.employee_photo)


@router_start_shift.message(StateFilter(FSMStartShift.employee_photo))
async def process_employee_photo_command(message: Message, state: FSMContext):
    if message.photo:
        await state.update_data(employee_photo=message.photo[-1].file_id)

        await message.answer(
            text="–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –æ–±—ä–µ–∫—Ç —Å —Ç—Ä—ë—Ö —Ä–∞–∫—É—Ä—Å–æ–≤\n"
                 "(—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, –Ω—É–∂–Ω–æ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏)",
            reply_markup=create_cancel_kb(),
        )
        await state.set_state(FSMStartShift.object_photo)
    else:
        await message.answer(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –í–∞—à–µ —Ñ–æ—Ç–æ –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ",
            reply_markup=create_cancel_kb(),
        )


@router_start_shift.message(StateFilter(FSMStartShift.object_photo))
async def process_object_photo_command(message: Message, state: FSMContext):
    if message.photo:
        if "object_photo" not in await state.get_data():
            await state.update_data(object_photo=[message.photo[-1].file_id])

        await message.answer(
            text="–¢–µ–ª–µ–∂–∫–∏ —á–∏—Å—Ç—ã–µ?",
            reply_markup=create_yes_no_kb(),
        )
        await state.set_state(FSMStartShift.is_carts_clean)
    else:
        await message.answer(
            text="–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –æ–±—ä–µ–∫—Ç —Å —Ç—Ä—ë—Ö —Ä–∞–∫—É—Ä—Å–æ–≤\n"
                 "(—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, –Ω—É–∂–Ω–æ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏)",
            reply_markup=create_cancel_kb(),
        )


@router_start_shift.callback_query(StateFilter(FSMStartShift.is_carts_clean), F.data == "yes")
async def process_is_carts_clean_yes_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–¢–µ–ª–µ–∂–∫–∏ —á–∏—Å—Ç—ã–µ?\n\n"
             "‚û¢ –î–∞",
    )
    await state.update_data(is_carts_clean="–¥–∞")
    await callback.message.answer(
        text="–ü–æ–ª —á–∏—Å—Ç—ã–π?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.is_floor_clean)


@router_start_shift.callback_query(StateFilter(FSMStartShift.is_carts_clean), F.data == "no")
async def process_is_carts_clean_no_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–¢–µ–ª–µ–∂–∫–∏ —á–∏—Å—Ç—ã–µ?\n\n"
             "‚û¢ –ù–µ—Ç\n\n"
             "‚ö†Ô∏è–ù—É–∂–Ω–æ –ø–æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ–ª–µ–∂–∫–∏!‚ö†Ô∏è",
    )
    await state.update_data(is_carts_clean="–Ω–µ—Ç")
    await callback.message.answer(
        text="–ü–æ–ª —á–∏—Å—Ç—ã–π?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.is_floor_clean)


@router_start_shift.message(StateFilter(FSMStartShift.is_carts_clean))
async def warning_is_carts_clean_command(message: Message):
    await message.answer(
        text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –≤–æ–ø—Ä–æ—Å–æ–º",
    )


@router_start_shift.callback_query(StateFilter(FSMStartShift.is_floor_clean), F.data == "yes")
async def process_is_floor_clean_yes_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ü–æ–ª —á–∏—Å—Ç—ã–π?\n\n"
             "‚û¢ –î–∞",
    )
    await state.update_data(is_floor_clean="–¥–∞")
    await callback.message.answer(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã –Ω–∞ —Ç–µ–ª–µ–∂–∫–∞—Ö?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.is_carts_defects)


@router_start_shift.callback_query(StateFilter(FSMStartShift.is_floor_clean), F.data == "no")
async def process_is_floor_clean_no_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ü–æ–ª —á–∏—Å—Ç—ã–π?\n\n"
             "‚û¢ –ù–µ—Ç",
    )
    await state.update_data(is_floor_clean="–Ω–µ—Ç")
    await callback.message.answer(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã –Ω–∞ —Ç–µ–ª–µ–∂–∫–∞—Ö?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.is_carts_defects)


@router_start_shift.message(StateFilter(FSMStartShift.is_floor_clean))
async def warning_is_floor_clean_command(message: Message):
    await message.answer(
        text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –≤–æ–ø—Ä–æ—Å–æ–º",
    )


@router_start_shift.callback_query(StateFilter(FSMStartShift.is_carts_defects), F.data == "yes")
async def process_is_carts_defects_yes_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã –Ω–∞ —Ç–µ–ª–µ–∂–∫–∞—Ö?\n\n"
             "‚û¢ –î–∞",
    )
    await state.update_data(is_carts_defects="–¥–∞")
    await callback.message.answer(
        text="–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤",
        reply_markup=create_cancel_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.defects_photo)


@router_start_shift.callback_query(StateFilter(FSMStartShift.is_carts_defects), F.data == "no")
async def process_is_carts_defects_no_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã –Ω–∞ —Ç–µ–ª–µ–∂–∫–∞—Ö?\n\n"
             "‚û¢ –ù–µ—Ç",
    )
    await state.update_data(is_carts_defects="–Ω–µ—Ç")

    start_shift_dict = await state.get_data()

    day_of_week = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime('%A')
    current_date = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime(
        f'%d/%m/%Y - {RUSSIAN_WEEK_DAYS[day_of_week]}')

    await send_report(
        message=callback.message,
        state=state,
        data=start_shift_dict,
        date=current_date,
        chat_id=cached_places[start_shift_dict['place']],
    )


@router_start_shift.message(StateFilter(FSMStartShift.defects_photo))
async def process_defects_photo_command(message: Message, state: FSMContext):
    if message.photo:
        if "defects_photo" not in await state.get_data():
            await state.update_data(defects_photo=[message.photo[-1].file_id])

        start_shift_dict = await state.get_data()

        day_of_week = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime('%A')
        current_date = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime(f'%d/%m/%Y - {RUSSIAN_WEEK_DAYS[day_of_week]}')

        await send_report(
            message=message,
            state=state,
            data=start_shift_dict,
            date=current_date,
            chat_id=cached_places[start_shift_dict['place']],
        )
    else:
        await message.answer(
            text="–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤",
            reply_markup=create_cancel_kb(),
        )


@router_start_shift.message(StateFilter(FSMStartShift.is_carts_defects))
async def warning_is_carts_defects_command(message: Message):
    await message.answer(
        text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –≤–æ–ø—Ä–æ—Å–æ–º",
    )
